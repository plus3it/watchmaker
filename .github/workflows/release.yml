name: Release version and publish package

on:
  workflow_run:
    workflows: ["Build and test"]
    types: [completed]

jobs:
  # Create release
  release:
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event != 'pull_request' &&
      github.event.workflow_run.head_branch == github.event.repository.default_branch
    name: Create release and publish package
    runs-on: ubuntu-latest
    outputs:
      release-condition: ${{ steps.release.outputs.release-condition }}
      release-version: ${{ steps.version.outputs.value }}
      scan-build-run-id: ${{ steps.scan-build.outputs.run-id }}
    permissions:
      actions: read  # Required to download artifacts from other workflow runs
      contents: read
    steps:
      - name: Retrieve source
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: source
          path: .
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Retrieve release distributions
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: dists
          path: dist/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Retrieve standalone binaries
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          pattern: standalone-*
          path: .pyinstaller/dist
          merge-multiple: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Get version
        id: version
        run: |
          VERSION="$(grep -E "version\s*=" setup.cfg | sed 's/^.*= //')"
          echo "version=${VERSION}"
          echo "value=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Set terrafirm run-id
        id: scan-build
        run: |
          RUN_ID=$(uuidgen)
          echo "run-id=${RUN_ID}" >> "$GITHUB_OUTPUT"
          echo "RUN_ID=${RUN_ID}"

      - name: Create GitHub release
        id: release
        uses: plus3it/actions-workflows/.github/actions/release@3b8e48de2da8233d170c1d094932a562d9a36990
        with:
          release-token: "${{ secrets.GH_RELEASES_TOKEN }}"
          release-files: |
            dist/*
            .pyinstaller/dist/*/*

  # Publish package to PyPI
  publish-pypi:
    if: needs.release.outputs.release-condition == 'true'
    name: Publish package to pypi
    runs-on: ubuntu-latest
    needs:
      - release
    permissions:
      actions: read  # Required to download artifacts from other workflow runs
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: dists
          path: dist/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc

  # Publish package to S3
  publish-s3:
    name: Publish package to s3
    runs-on: ubuntu-latest
    needs:
      - release
    permissions:
      actions: read  # Required to download artifacts from other workflow runs
      id-token: write  # IMPORTANT: needed for oidc assume-role
    env:
      AWS_DEFAULT_REGION: us-east-1
      BUCKET_NAME: "${{ needs.release.outputs.release-condition != 'true' && vars.DEV_BUCKET || vars.RELEASE_BUCKET }}"
    steps:
      - name: Retrieve standalone binaries
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          pattern: standalone-*
          path: .pyinstaller/dist
          merge-multiple: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Install aws-cli
        uses: unfor19/install-aws-cli-action@f5b46b7f32cf5e7ebd652656c5036bf83dd1e60c

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df
        with:
          role-session-name: "watchmaker-publish-s3-package"
          role-to-assume: "${{ secrets.AWS_ROLE_ARN }}"
          aws-region: "${{ env.AWS_DEFAULT_REGION }}"

      - name: Validate credential
        run: aws sts get-caller-identity

      - run: ls -alR .pyinstaller/dist/
      - run: mkdir -p .pyinstaller/dist/latest
      - run: cp .pyinstaller/dist/*/watchmaker-*-standalone-linux-x86_64 .pyinstaller/dist/latest/watchmaker-latest-standalone-linux-x86_64
      - run: cp .pyinstaller/dist/*/watchmaker-*-standalone-windows-amd64.exe .pyinstaller/dist/latest/watchmaker-latest-standalone-windows-amd64.exe
      - run: cp .pyinstaller/dist/*/watchmaker-bootstrap.ps1 .pyinstaller/dist/latest/watchmaker-bootstrap.ps1
      - run: cd .pyinstaller/dist/latest && sha256sum watchmaker-latest-standalone-linux-x86_64 > watchmaker-latest-standalone-linux-x86_64.sha256
      - run: cd .pyinstaller/dist/latest && sha256sum watchmaker-latest-standalone-windows-amd64.exe > watchmaker-latest-standalone-windows-amd64.exe.sha256
      - run: ls -alR .pyinstaller/dist/latest

      - name: Publish standalone binaries to S3
        run: aws s3 cp --recursive .pyinstaller/dist/ s3://${{ env.BUCKET_NAME }}/${{ vars.S3_PREFIX }}/

  # Publish scans to S3
  publish-scans:
    name: Publish scans to s3
    runs-on:
      - codebuild-p3-terrafirm-${{ github.run_id }}-${{ github.run_attempt }}
        instance-size:small
    needs:
      - release
    strategy:
      fail-fast: false
      matrix:
        scan-build: ["rhel8", "rhel9", "win16", "win19", "win22"]
    env:
      TF_VAR_aws_region: us-east-1
      TF_VAR_codebuild_id: ${{ needs.release.outputs.scan-build-run-id }}
      TF_VAR_common_args: "-n -e dev"
      TF_VAR_git_ref: ${{ github.sha }}
      TF_VAR_git_repo: "${{ github.server_url }}/${{ github.repository }}.git"
      TF_VAR_scan_s3_url: "s3://${{ needs.release.outputs.release-condition != 'true' && vars.DEV_BUCKET || vars.RELEASE_BUCKET }}/${{ vars.S3_PREFIX}}/${{ needs.release.outputs.release-version }}/scans"
      TF_VAR_source_builds: '["${{ matrix.scan-build }}"]'
      TF_VAR_standalone_builds: '[]'
    steps:
      - name: Generate scan reports
        id: terrafirm
        uses: plus3it/terrafirm/.github/actions/test@e542672b4d5d7103cc4490989691e9f703fbd20a
        with:
          destroy-after-test: true
